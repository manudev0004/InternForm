{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/me/InternForm/src/ai/ai-instance.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  promptDir: './prompts',\n  plugins: [\n    googleAI({\n      apiKey: process.env.GOOGLE_GENAI_API_KEY,\n    }),\n  ],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,WAAW;IACX,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,QAAQ,GAAG,CAAC,oBAAoB;QAC1C;KACD;IACD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file:///home/me/InternForm/src/services/exam-details.ts"],"sourcesContent":["/**\n * Represents the basic information for an exam.\n */\nexport interface ExamDetails {\n  /**\n   * The level of the exam (e.g., National, State, Institutional).\n   */\n  examLevel: string;\n  /**\n   * The category of the exam (e.g., Defense, Banking, Civil Services).\n   */\n  category: string;\n}\n\n/**\n * Asynchronously retrieves exam details based on the exam name and conducting body.\n *\n * @param examName The name of the exam.\n * @param conductingBody The body conducting the exam.\n * @returns A promise that resolves to an ExamDetails object containing exam level and category.\n */\nexport async function getExamDetails(\n  examName: string,\n  conductingBody: string\n): Promise<ExamDetails> {\n  // TODO: Implement this by calling an API.\n  return {\n    examLevel: 'National',\n    category: 'Civil Services',\n  };\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;AAmBM,eAAe,eACpB,QAAgB,EAChB,cAAsB;IAEtB,0CAA0C;IAC1C,OAAO;QACL,WAAW;QACX,UAAU;IACZ;AACF","debugId":null}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":["file:///home/me/InternForm/src/ai/flows/ai-assisted-field-completion.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview AI-powered field completion for exam data input.\n *\n * - aiAssistedFieldCompletion - A function that suggests possible values for examLevel and category based on examName and conductingBody.\n * - AIFieldCompletionInput - The input type for the aiAssistedFieldCompletion function.\n * - AIFieldCompletionOutput - The return type for the aiAssistedFieldCompletion function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\nimport {getExamDetails} from '@/services/exam-details';\n\nconst AIFieldCompletionInputSchema = z.object({\n  examName: z.string().describe('The name of the exam.'),\n  conductingBody: z.string().describe('The body conducting the exam.'),\n});\nexport type AIFieldCompletionInput = z.infer<typeof AIFieldCompletionInputSchema>;\n\nconst AIFieldCompletionOutputSchema = z.object({\n  examLevel: z.string().describe('The suggested level of the exam.'),\n  category: z.string().describe('The suggested category of the exam.'),\n});\nexport type AIFieldCompletionOutput = z.infer<typeof AIFieldCompletionOutputSchema>;\n\nexport async function aiAssistedFieldCompletion(\n  input: AIFieldCompletionInput\n): Promise<AIFieldCompletionOutput> {\n  return aiFieldCompletionFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'aiFieldCompletionPrompt',\n  input: {\n    schema: z.object({\n      examName: z.string().describe('The name of the exam.'),\n      conductingBody: z.string().describe('The body conducting the exam.'),\n      examLevel: z.string().describe('The suggested level of the exam.'),\n      category: z.string().describe('The suggested category of the exam.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      examLevel: z.string().describe('The suggested level of the exam.'),\n      category: z.string().describe('The suggested category of the exam.'),\n    }),\n  },\n  prompt: `Based on the exam name \"{{examName}}\" and conducting body \"{{conductingBody}}\", suggest appropriate values for examLevel and category. Return the values as a JSON object.\n`,\n});\n\nconst aiFieldCompletionFlow = ai.defineFlow<\n  typeof AIFieldCompletionInputSchema,\n  typeof AIFieldCompletionOutputSchema\n>(\n  {\n    name: 'aiFieldCompletionFlow',\n    inputSchema: AIFieldCompletionInputSchema,\n    outputSchema: AIFieldCompletionOutputSchema,\n  },\n  async input => {\n    // Call service to get exam details (mock implementation for now)\n    const examDetails = await getExamDetails(input.examName, input.conductingBody);\n\n    // If the service returns valid data, return it directly.\n    if (examDetails?.examLevel && examDetails?.category) {\n      return {\n        examLevel: examDetails.examLevel,\n        category: examDetails.category,\n      };\n    }\n\n    // Otherwise, call the LLM to provide suggestions.\n    const {output} = await prompt({\n      ...input,\n      examLevel: '',\n      category: '',\n    });\n\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;AACA;;;;;;;AAEA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC;AAGA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,eAAe,uCAAuB,GAAvB,0BACpB,KAA6B;IAE7B,OAAO,sBAAsB;AAC/B;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC9B,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACpC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC/B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAChC;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC/B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAChC;IACF;IACA,QAAQ,CAAC;AACX,CAAC;AACD;AAEA,MAAM,wBAAwB,2HAAA,CAAA,KAAE,CAAC,UAAU,CAIzC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,iEAAiE;IACjE,MAAM,cAAc,MAAM,CAAA,GAAA,kIAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,QAAQ,EAAE,MAAM,cAAc;IAE7E,yDAAyD;IACzD,IAAI,aAAa,aAAa,aAAa,UAAU;QACnD,OAAO;YACL,WAAW,YAAY,SAAS;YAChC,UAAU,YAAY,QAAQ;QAChC;IACF;IAEA,kDAAkD;IAClD,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;QAC5B,GAAG,KAAK;QACR,WAAW;QACX,UAAU;IACZ;IAEA,OAAO;AACT;;;IAvDoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 341, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 392, "column": 0}, "map": {"version":3,"sources":["file:///home/me/InternForm/src/app/admin/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0R,GACvT,wDACA","debugId":null}},
    {"offset": {"line": 406, "column": 0}, "map": {"version":3,"sources":["file:///home/me/InternForm/src/app/admin/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsQ,GACnS,oCACA","debugId":null}},
    {"offset": {"line": 420, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}